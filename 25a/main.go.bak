package main

import (
	"flag"
	"fmt"
	"os"
	"strings"
	"sync"
)

const debug bool = false

// generateCombinations generates all combinations of size 'comboSize' from the given slice 'set'.
func generateCombinations(set_len int, comboSize int) [][]int {
    set := make([]int, set_len)
    for i := 0; i < set_len; i++ {
        set[i] = i
    }
    n := len(set)
    if comboSize > n || comboSize <= 0 {
        return nil
    }

    // Initialize the first combination
    indices := make([]int, comboSize)
    for i := range indices {
        indices[i] = i
    }

    var combinations [][]int
    for {
        // Create a new combination based on the indices
        combo := make([]int, comboSize)
        for i, index := range indices {
            combo[i] = set[index]
        }
        combinations = append(combinations, combo)

        // Move to the next combination
        i := comboSize - 1
        for i >= 0 && indices[i] == i+n-comboSize {
            i--
        }
        if i < 0 {
            break // All combinations have been generated
        }
        indices[i]++
        for j := i + 1; j < comboSize; j++ {
            indices[j] = indices[j-1] + 1
        }
    }

    return combinations
}

func generateCombinationsChannel(set_len int, comboSize int, combinations chan<- []int) {
    set := make([]int, set_len)
    for i := 0; i < set_len; i++ {
        set[i] = i
    }
    n := len(set)

    // Initialize the first combination
    indices := make([]int, comboSize)
    for i := range indices {
        indices[i] = i
    }

    for {
        // Create a new combination based on the indices
        combo := make([]int, comboSize)
        for i, index := range indices {
            combo[i] = set[index]
        }
        combinations <- combo

        // Move to the next combination
        i := comboSize - 1
        for i >= 0 && indices[i] == i+n-comboSize {
            i--
        }
        if i < 0 {
            break // All combinations have been generated
        }
        indices[i]++
        for j := i + 1; j < comboSize; j++ {
            indices[j] = indices[j-1] + 1
        }
    }
    close(combinations)
}

func multiplyMatrices(A [][]int, B [][]int) ([][]int, error) {
    aRows := len(A)
    aCols := len(A[0])
    bRows := len(B)
    bCols := len(B[0])

    if aCols != bRows {
        return nil, fmt.Errorf("cannot multiply the given matrices: incompatible dimensions")
    }

    // Initialize the result matrix with zeros
    result := make([][]int, aRows)
    for i := range result {
        result[i] = make([]int, bCols)
    }

    // Perform matrix multiplication
    for i := 0; i < aRows; i++ {
        for j := 0; j < bCols; j++ {
            for k := 0; k < aCols; k++ {
                result[i][j] += A[i][k] * B[k][j]
            }
        }
    }

    return result, nil
}

func checkConnected(graph map[string][]string, nodes []string) bool {
    // Create adjacency matrix
    adjacency_matrix := make([][]int, len(nodes))
    for i := range adjacency_matrix {
        adjacency_matrix[i] = make([]int, len(nodes))
    }
    for i, node := range nodes {
        for j, other_node := range nodes {
            if i == j {
                adjacency_matrix[i][j] = 0
            } else {
                if IndexOf[string](graph[node], other_node) != -1 {
                    adjacency_matrix[i][j] = 1
                } else {
                    adjacency_matrix[i][j] = 0
                }
            }
        }
    }
    // Print adjacency matrix
    fmt.Println("Adjacency matrix")
    for i, row := range adjacency_matrix {
        fmt.Println(nodes[i], row)
    }

    adjacency_matrix_m := make([][]int, len(nodes))
    for i := range adjacency_matrix_m {
        adjacency_matrix_m[i] = make([]int, len(nodes))
    }
    for i, row := range adjacency_matrix {
        for j, val := range row {
            adjacency_matrix_m[i][j] = val
        }
    }

    // Multiply the adjacency matrix with itself
    connected := true
    for i:=0; i<len(nodes)-1; i++ {
        adjacency_matrix_2, err := multiplyMatrices(adjacency_matrix_m, adjacency_matrix)
        if err != nil {
            fmt.Println(err)
            os.Exit(1)
        }
        adjacency_matrix_m = adjacency_matrix_2
        fmt.Printf("Adjacency matrix: (%v)-th power\n", i+1)
        for i, row := range adjacency_matrix_m {
            fmt.Println(nodes[i], row)
        }
        no_zeros := true
        for _, row := range adjacency_matrix_m {
            for _, val := range row {
                if val == 0 {
                    no_zeros = false
                }
            }
        }
        if no_zeros {
            fmt.Println("The graph is connected")
            connected = true
            break
        }
    }
    return connected
}

func getConnectedGroupsCount(graph map[string][]string, nodes []string, remove [3][2]string) int {
    new_graph := make(map[string][]string)
    for k, v := range graph {
        new_graph[k] = []string{}
        for _, val := range v {
            found := false
            for _, rem := range remove {
                if (rem[0] == k && rem[1] == val) || (rem[0] == val && rem[1] == k) {
                    found = true
                    break
                }
            }
            if !found {
                new_graph[k] = append(new_graph[k], val)
            }
        }
    }

    // Do a depth first search
    visited := make(map[string]bool)
    painted := make(map[string]int)
    for _, node := range nodes {
        visited[node] = false
        painted[node] = 0
    }
    work := []string{nodes[0]}
    group := 1
    for len(work) > 0 {
        current_node := work[0]
        work = work[1:]
        if !visited[current_node] {
            visited[current_node] = true
            painted[current_node] = group
            for _, neighbour := range new_graph[current_node] {
                work = append(work, neighbour)
            }
        }
        if len(work) == 0 {
            for _, node := range nodes {
                if !visited[node] {
                    group++
                    work = append(work, node)
                    break
                }
            }
        }
    }
    paints := []int{}
    for _, paint := range painted {
        paints = append(paints, paint)
    }
    paints = RemoveDuplicates[int](paints)
    if len(paints) == 1 {
        return 0
    }
    paints_size := []int{}
    for _, paint := range paints {
        size := 0
        for _, p := range painted {
            if p == paint {
                size++
            }
        }
        paints_size = append(paints_size, size)
    }
    result := 1
    for _, size := range paints_size {
        result *= size
    }
    return result
}

func processWorker(id int, combinations <-chan [3][2]string, results chan<- int, wg *sync.WaitGroup, graph map[string][]string, nodes []string) {
    defer wg.Done()
    for combination := range combinations {
        fmt.Println(id, "processing combination", combination)
        count := getConnectedGroupsCount(graph, nodes, combination)
        results <- count
    }
}

func processWorkerCombChannel(id int, combos <-chan []int, results chan<- int, wg *sync.WaitGroup, graph map[string][]string, nodes []string, connections [][2]string) {
    defer wg.Done()
    for combination := range combos {
        //fmt.Println("Processing combination", combination, "on worker", id)
        comb := [3][2]string{}
        for i, index := range combination {
            comb[i] = connections[index]
        }
        count := getConnectedGroupsCount(graph, nodes, comb)
        results <- count
    }
}


func main() {
	if debug {
		fmt.Println("Debug enabled")
	}
	cores_f := flag.Int("t", -1, "How many cores (threads) should we run?")
	filename_f := flag.String("f", "", "On which file should we run this?")
	flag.Parse()

	// The second element in os.Args is the first argument
	filename := *filename_f
	if len(filename) == 0 {
		fmt.Println("Please provide a filename")
		os.Exit(1)
	}
	cores := *cores_f
	if cores < 0 {
		cores = 1
	}

	dat, err := os.ReadFile(filename)
	Check(err)

	// Read file
	fmt.Println("Reading file", filename)
    graph := make(map[string][]string)
    nodes := []string{}
    connections := [][2]string{}
	for _, line := range strings.Split(string(dat), "\n") {
		cleaned_line := strings.TrimSpace(line)
		if len(cleaned_line) > 0 {
            // Split the line into the two parts
            parts := strings.Split(cleaned_line, ": ")
            
            left := parts[0]
            right := strings.TrimSpace(parts[1])
            // Split the right part into the individual elements
            right_parts := strings.Split(right, " ")
            graph[left] = []string{}
            nodes = append(nodes, left)
            for _, part := range right_parts {
                graph[left] = append(graph[left], part)
                nodes = append(nodes, part)
                connections = append(connections, [2]string{left, part})
            }
		}
	}
    nodes = RemoveDuplicates(nodes)
    for k, v := range graph {
        for _, val := range v {
            graph[val] = append(graph[val], k)
        }
    }
    fmt.Println("Nodes", len(nodes))
    fmt.Println("Connections", len(connections))
    

    // Create workers
    num_workers := cores

    // Create channels
    var wg sync.WaitGroup
    combinations := make(chan []int, num_workers)
    results := make(chan int, num_workers)
    final_results := make(chan int, num_workers)

    // Start workers
    for i := 0; i < num_workers; i++ {
        wg.Add(1)
        go processWorkerCombChannel(i, combinations, results, &wg, graph, nodes, connections)
    }

    // Collect results in a separate goroutine
    go func() {
        wg.Wait()
        close(results)
    }()

    // Aggregate results
    go func() {
        total := 0
        for result := range results {
            if result > 0 {
                if debug {
                    fmt.Println("Result", result)
                }
                total += result
            }
        }
        final_results <- total
        close(final_results)
    }()


    // Generate combinations
    go generateCombinationsChannel(len(connections), 3, combinations)


    // Collect results
    total := 0
    for result := range final_results {
        total += result
    }
    fmt.Println("Total", total)
}
