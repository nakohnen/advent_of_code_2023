package main

import (
	"fmt"
	"os"
	"strings"
	"sync"

	//"unicode"
	//	"math"
	//"sort"
	"strconv"
	//"sync"
)

const debug bool = false

func check(e error) {
	if e != nil {
		panic(e)
	}
}

func toInt(val string) int {
	v, err := strconv.Atoi(val)
	check(err)
	return v
}

func abs(x int) int {
	if x < 0 {
		return -x
	}
	return x
}

func hasPrefix(line string, sub string) bool {
	if len(line) < len(sub) {
		return false
	}
	return line[0:len(sub)] == sub
}

func replaceCharacters(line string, rem string, rep string) string {
	result := line
	for _, c := range rem {
		result = strings.ReplaceAll(result, string(c), rep)
	}
	return result
}

// allElementsSame checks if all elements of the slice are the same
func allElementsSame(slice []int) bool {
	if len(slice) == 0 {
		return true // Optionally, define behavior for empty slices
	}

	firstElement := slice[0]
	for _, element := range slice {
		if element != firstElement {
			return false
		}
	}
	return true
}

func countConseqChar(spring string, char rune) int {
	start := false
	res := 0
	for _, r := range spring {
		if r == char {
			if !start {
				start = true
			}
			res++
		} else if r != char {
			if start {
				return res
			}
		}
	}
	return res

}

func countChar(spring string, char rune) int {
	res := 0
	for _, r := range spring {
		if r == char {
			res++
		}
	}
	return res
}

func sumIntSlice(slice []int) int {
	res := 0
	for _, v := range slice {
		res += v
	}
	return res
}

func equal(a, b []int) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(b); i++ {
		if a[i] != b[i] {
			return false
		}
	}
	return true
}

func getUniqueIntSlices(input [][]int) [][]int {
	result := [][]int{}
	for _, slice := range input {
		found := false
		for _, r_slice := range result {
			if equal(slice, r_slice) {
				found = true
			}
		}
		if !found {
			result = append(result, slice)
		}
	}
	return result
}

func getUniqueIntValues(input []int) []int {
	seen := make(map[int]bool)
	res := []int{}
	for _, i := range input {
		if !seen[i] {
			res = append(res, i)
			seen[i] = true
		}
	}
	return res
}

func checkCorrectness(spring string, config []int) bool {
	sum_c := 0
	for _, v := range config {
		sum_c += v
	}
	if countChar(spring, '#')+countChar(spring, '?') < sum_c {
		return false
	}
	if countChar(spring, '#') > sum_c {
		return false
	}

	no_q_marks := true
	for _, r := range spring {
		if r == '?' {
			no_q_marks = false
			break
		}
	}

	spring_split := strings.Split(spring, ".")
	if no_q_marks {
		p_config := []int{}
		for _, s := range spring_split {
			if len(s) > 0 {
				p_config = append(p_config, len(s))
			}
		}
		if len(p_config) == len(config) {
			for i := 0; i < len(config); i++ {
				if p_config[i] != config[i] {
					return false
				}
			}
			return true
		}
		return false
	} else {
		// Lets check if the first filled blocks are correct
		filled := []string{}
		for _, s := range spring_split {
			if len(s) > 0 {
				if countChar(s, '?') == 0 {
					filled = append(filled, s)
				} else {
					break
				}
			}
		}
		for i := 0; i < min(len(filled), len(config)); i++ {
			if config[i] != len(filled[i]) {
				if debug {
					fmt.Printf("%v %v is invalid. ", filled, config)
				}
				return false
			}
		}
	}

	return true
}

func calculatePossibilites(spring string, config []int) int {
	cases := [2]rune{'.', '#'}
	work := []string{spring}
	if debug {
		fmt.Printf("%v with %v\n", spring, config)
	}
    if countChar(spring, '?') == 0 && len(config) == 1 && config[0] == len(spring) {
        return 1
    }
	result := 0
	for i := 0; i < len(spring); i++ {
		new_work := []string{}
		for _, w := range work {
			if w[i] == '?' {
				for _, r := range cases {
					runes := []rune(w)
					runes[i] = r
					new_spring := string(runes)
					if debug {
						fmt.Printf("New candidate %v", new_spring)
					}

					if countChar(new_spring, '?') > 0 && countChar(new_spring, '#') == sumIntSlice(config) {
						new_spring2 := replaceCharacters(new_spring, "?", ".")
						if debug {
							fmt.Printf(" => Replacing %v with %v", new_spring, new_spring2)
						}
						new_spring = new_spring2
					}

					if checkCorrectness(new_spring, config) {
						if debug {
							fmt.Print(" is valid.")
						}
						if countChar(new_spring, '?') == 0 {
							result++
						} else {
							new_work = append(new_work, new_spring)
						}
					}
					if debug {
						fmt.Println("")
					}
				}
			} else {
				new_work = append(new_work, w)
			}
		}
		work = new_work
	}
	if debug {
		fmt.Println("Possibilites:")
		fmt.Printf("\t   %v\n", spring)
		for _, w := range work {
			fmt.Printf("\t=> %v\n", w)
		}
	}
	if debug {
		fmt.Printf("%v %v => %v\n", spring, config, result)
	}
	return result
}

func createPossibleConfigsFromConfig(spring string, config []int) [][]int {
    result := [][]int{}
    result = append(result, []int{})
    for length:=1;length<=len(config);length++{
        for i:=0;i<len(config)-length;i++ {
            candidate := []int{}
            candidate = append(candidate, config[i:i+length]...)
            result = append(result, candidate)
        }
    }
    return getUniqueIntSlices(result)
}

func createPossibleConfigs(spring string, filter []int) [][]int {
	all_configs := [][]int{}
	new_filter := getUniqueIntValues(filter)
	new_filter = append(new_filter, 0)
	for _, f := range new_filter {
		cand := []int{f}
		all_configs = append(all_configs, cand)
	}
	for length := 1; length < len(spring); length++ {
		new_configs := [][]int{}
		for _, old := range all_configs {
			for _, f := range new_filter {
				cand := []int{}
				cand = append(cand, old...)
				cand = append(cand, f)
				if sumIntSlice(cand) <= len(spring) {
					new_configs = append(new_configs, cand)
				}
			}
		}
		all_configs = new_configs
	}
	new_configs := [][]int{}
	for _, c := range all_configs {
		cand := []int{}
		for _, val := range c {
			if val > 0 {
				cand = append(cand, val)
			}
		}
		new_configs = append(new_configs, cand)
	}
	return getUniqueIntSlices(new_configs)
}

func processWorker(spring string, config []int, resultChan chan<- int, wg *sync.WaitGroup) {
	defer wg.Done()
	resultChan <- calculateTotalPossibilites(spring, config)
}

func multiplyString(s string, times int, join_char rune) string {
	var builder strings.Builder
	for i := 0; i < times; i++ {
		builder.WriteString(s)
		if join_char != 0 && i < times-1 {
			builder.WriteRune(join_char)
		}
	}
	return builder.String()
}

func multiplySlice[T any](slice []T, times int) []T {
	new_s := []T{}
	for i := 0; i < times; i++ {
		new_s = append(new_s, slice...)
	}
	return new_s
}

func flattenSliceIntSlice(input [][]int) []int {
	result := []int{}
	for _, inner := range input {
		result = append(result, inner...)
	}
	return result
}

func isValidSubSuperConfig(super [][]int, config []int) bool {
	flat_super := flattenSliceIntSlice(super)
	if len(flat_super) > len(config) {
		return false
	}
	for i := 0; i < min(len(flat_super), len(config)); i++ {
		if flat_super[i] != config[i] {
			return false
		}
	}
	return true
}

func recreateSuperConfig(input []int, possible_configs [][][]int) [][]int {
	result := [][]int{}
	for i, val := range input {
		result = append(result, possible_configs[i][val])
	}
	return result
}

func isValidSuperConfig(super [][]int, config []int) bool {
    flat_super := flattenSliceIntSlice(super)
    if len(config) != len(flat_super) {
        return false
    }
    for i:=0; i < len(config);i++{
        if flat_super[i] != config[i] {
            return false
        }
    }
    return true
}

func calculateTotalPossibilites(spring string, config []int) int {
	// We split it along '.'
	splits_tmp := strings.Split(spring, ".")
	splits := []string{}
	for _, s := range splits_tmp {
		if len(s) > 0 {
			splits = append(splits, s)
		}
	}
    if len(splits) == 1 {
        result := calculatePossibilites(splits[0], config)
        fmt.Printf("\tv0 spring=%v config=%v combinations=%v\n", spring, config, result)
	    return result
/*    } else if countChar(spring, '#') > 0 {
        result := calculatePossibilites(spring, config)
        fmt.Printf("\tv1 spring=%v config=%v combinations=%v\n", spring, config, result)
        return result */
    }

	// Calculate all possible configs
	//   first level is the split => for each split a [][]int{}
	//   second level is the possible configs which have a []int{} shape
	possible_configs := [][][]int{}
	possible_combinations := [][]int{}
	for _, split := range splits {
		new_configs_tmp := createPossibleConfigsFromConfig(split, config)
		//new_configs_tmp := createPossibleConfigs(split, config)
		combinations := []int{}
		new_configs := [][]int{}

		for _, new_config := range new_configs_tmp {
			pos := calculatePossibilites(split, new_config)
			if pos > 0 {
				// Only add those with make sense and are possible
				combinations = append(combinations, pos)
				new_configs = append(new_configs, new_config)
			}
		}

		possible_configs = append(possible_configs, new_configs)
		possible_combinations = append(possible_combinations, combinations)
	}
	if debug {

		fmt.Printf("%v with config %v =>\n", spring, config)
		for i := 0; i < len(possible_configs); i++ {
			fmt.Printf("\t%v => %v == %v\n", splits[i], possible_configs[i],
				possible_combinations[i])
		}
	}

	// Combine configs to calculate all possibilities and return
	super_configs := [][]int{}
	for i, _ := range possible_configs[0] {
		new_super := []int{i}
		super_configs = append(super_configs, new_super)
	}
    result := 0
	for i := 1; i < len(splits); i++ {
		new_outer_super_configs := [][]int{}
		for j, _ := range possible_configs[i] {
			for _, super := range super_configs {
				new_super := []int{}
				new_super = append(new_super, super...)
				new_super = append(new_super, j)

                super_with_config := recreateSuperConfig(new_super, possible_configs)
                if isValidSuperConfig(super_with_config, config) {
                    combs := 1
                    for split_i, inner_index := range new_super {
                        combs *= possible_combinations[split_i][inner_index]
                    }
                    if debug {
                        fmt.Printf("\tsuper=%v for config=%v == %v combinations\n", super_with_config, config, combs)
                    }
                    result += combs
                } else if isValidSubSuperConfig(super_with_config, config) {
					new_outer_super_configs = append(new_outer_super_configs, new_super)
				}
			}
			/*if debug {
				fmt.Printf("\tsuper_configs=%v\n", super_configs)
			}*/
		}
		super_configs = new_outer_super_configs
	}
	/*if debug {
		for _, super := range super_configs {
			fmt.Printf("\tsuper=%v\n", super)
		}
	}*/
    fmt.Printf("\tv2 spring=%v config=%v combinations=%v\n", spring, config, result)
	return result
}

func main() {
	// Check if an argument is provided
	if len(os.Args) < 2 {
		fmt.Println("Please provide a filename")
		os.Exit(1)
	}

	// The second element in os.Args is the first argument
	filename := os.Args[1]

	dat, err := os.ReadFile(filename)
	check(err)

	springs := []string{}
	configs := [][]int{}
	lines := strings.Split(strings.TrimSpace(string(dat)), "\n")
	for _, line := range lines {
		line_split := strings.Split(line, " ")
        spring := line_split[0]
		spring = multiplyString(spring, 5, '?')
		springs = append(springs, spring)

		config := []int{}
        config_part := line_split[1]
		config_part = multiplyString(config_part, 5, ',')
		for _, val := range strings.Split(config_part, ",") {
			config = append(config, toInt(val))
		}
		configs = append(configs, config)
		fmt.Printf("%v => %v + %v\n", line, spring, config)
	}

	results := 0
	if debug {
		resultChan := make(chan int, len(springs))
		var wg sync.WaitGroup

		for i := 0; i < len(springs); i++ {
			wg.Add(1)
			go processWorker(springs[i], configs[i], resultChan, &wg)
		}
		fmt.Printf("To work on: %v elements\n", len(springs))

		// Close the channel once all goroutines have finished
		go func() {
			wg.Wait()
			close(resultChan)
		}()

		// Collect results
		for result := range resultChan {
			results += result
		}
	} else {
		for i := 0; i < len(springs); i++ {
			results += calculateTotalPossibilites(springs[i], configs[i])
		}
	}

	fmt.Println("Final results:", results)

	fmt.Println("")
}
