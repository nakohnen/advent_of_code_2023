package main

import (
	"flag"
	"fmt"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	//"unicode"
)

const debug bool = true

func check(e error) {
	if e != nil {
		panic(e)
	}
}

func toInt(val string) int {
	v, err := strconv.Atoi(val)
	check(err)
	return v
}

func abs(x int) int {
	if x < 0 {
		return -x
	}
	return x
}

func hasPrefix(line string, sub string) bool {
	if len(line) < len(sub) {
		return false
	}
	return line[0:len(sub)] == sub
}

func replaceCharacters(line string, rem string, rep string) string {
	result := line
	for _, c := range rem {
		result = strings.ReplaceAll(result, string(c), rep)
	}
	return result
}

func sumIntSlice(slice []int) int {
	r := 0
	for _, v := range slice {
		r += v
	}
	return r
}

func IndexOf[T comparable](s []T, element T) int {
	for i, e := range s {
		if e == element {
			return i
		}
	}
	return -1
}

func IndexOfString(s string, r rune) int {
	for i, r2 := range s {
		if r2 == r {
			return i
		}
	}
	return -1
}

type Position struct {
	x, y int
}

func trackBack(pos Position, came_from map[Position]Position) map[Position]bool {
	result := make(map[Position]bool)
	result[pos] = true
	next, ok := came_from[pos]
	for ok {
		result[next] = true
		next, ok = came_from[next]
	}

	return result
}

func paintGrid(grid map[Position]int, height, width int, came_from map[Position]Position, current WalkCost) {
	var sb strings.Builder
    var sb_right strings.Builder
	track := trackBack(current.pos, came_from)
	for y := 0; y < height; y++ {
		sb.Reset()
        sb_right.Reset()
        sb_right.WriteString(" ")
		for x := 0; x < width; x++ {
			pos := Position{x, y}
			var tile string = fmt.Sprintf("%v", grid[pos])
            var right_tile string = "."
			if track[pos] {
				if v, ok := came_from[pos]; ok {
					if v.x+1 == pos.x {
						tile = ">"
					} else if v.x-1 == pos.x {
						tile = "<"
					} else if v.y+1 == pos.y {
						tile = "v"
					} else if v.y-1 == pos.y {
						tile = "^"
					}
                    right_tile = fmt.Sprintf("%v", grid[pos])
				}
			}

			sb.WriteString(tile)
            sb_right.WriteString(right_tile)
		}
		fmt.Println(sb.String() + sb_right.String())
	}
}

type Direction int

const (
	UP Direction = iota
	DOWN
	LEFT
	RIGHT
    HORIZONTAL Direction = iota
    VERTICAL
)

func orthogonal(a, b Direction) bool {
	if a == UP || a == DOWN {
		if b == LEFT || b == RIGHT {
			return true
		}
	} else if a == LEFT || a == RIGHT {
		if b == UP || b == DOWN {
			return true
		}
	}
	return false
}

func reverse(a, b Direction) bool {
	switch a {
	case UP:
		if b == DOWN {
			return true
		}
	case DOWN:
		if b == UP {
			return true
		}
	case LEFT:
		if b == RIGHT {
			return true
		}
	case RIGHT:
		if b == LEFT {
			return true
		}
	}
	return false
}

type WalkCost struct {
	pos       Position
	cost      int
	direction Direction
}

// copyMap creates a new map and copies the key-value pairs from the original map
func copyMap(originalMap map[Position]bool) map[Position]bool {
	newMap := make(map[Position]bool)
	for key, value := range originalMap {
		newMap[key] = value
	}
	return newMap
}

type Vector struct {
	pos Position
	dir Direction
}

func walkGrid(grid map[Position]int, width, height int, start Position, target Position) int {
	open_set := []WalkCost{}
    open_set = append(open_set, WalkCost{start, 0, RIGHT})
    open_set = append(open_set, WalkCost{start, 0, DOWN})
	cost_map := make(map[Position]int)
	came_from := make(map[Position]Position)
	for x := 0; x < width; x++ {
		for y := 0; y < height; y++ {
			cost_map[Position{x, y}] = math.MaxInt
		}
	}
	cost_map[start] = 0
	current := open_set[0]

	for len(open_set) > 0 {
		sort.Slice(open_set, func(i, j int) bool {
			a := open_set[i]
			b := open_set[j]
			/*if a.cost == b.cost {
			    d1 := abs(target.x-a.pos.x) + abs(target.y-a.pos.y)
			    d2 := abs(target.x-b.pos.x) + abs(target.y-b.pos.y)
			    return d1 < d2
			}*/
			return a.cost < b.cost
		})
		if debug {
			fmt.Printf("Open Set: %v\n", open_set)
		}
		current = open_set[0]

		open_set = open_set[1:]
		if debug {

			fmt.Printf("Current: %v ", current)
            if _, ok := came_from[current.pos]; ok {
                fmt.Printf("came from %v", came_from[current.pos])
            }
            fmt.Println("")
			paintGrid(grid, height, width, came_from, current)
		}

		candidates := []Vector{}
        if current.direction == UP || current.direction == DOWN {
		    candidates = append(candidates, Vector{Position{current.pos.x - 1, current.pos.y}, LEFT})
		    candidates = append(candidates, Vector{Position{current.pos.x - 2, current.pos.y}, LEFT})
		    candidates = append(candidates, Vector{Position{current.pos.x - 3, current.pos.y}, LEFT})
		    candidates = append(candidates, Vector{Position{current.pos.x + 1, current.pos.y}, RIGHT})
		    candidates = append(candidates, Vector{Position{current.pos.x + 2, current.pos.y}, RIGHT})
		    candidates = append(candidates, Vector{Position{current.pos.x + 3, current.pos.y}, RIGHT})
        } else if current.direction == LEFT || current.direction == RIGHT {
	    	candidates = append(candidates, Vector{Position{current.pos.x, current.pos.y - 1}, UP})
	    	candidates = append(candidates, Vector{Position{current.pos.x, current.pos.y - 2}, UP})
	    	candidates = append(candidates, Vector{Position{current.pos.x, current.pos.y - 3}, UP})
	    	candidates = append(candidates, Vector{Position{current.pos.x, current.pos.y + 1}, DOWN})
	    	candidates = append(candidates, Vector{Position{current.pos.x, current.pos.y + 2}, DOWN})
	    	candidates = append(candidates, Vector{Position{current.pos.x, current.pos.y + 3}, DOWN})
        }
		for _, c := range candidates {
			pos := c.pos
			if debug {
				fmt.Printf("%v candidate.\n", c)
			}
			if pos.x >= 0 && pos.y >= 0 && pos.x < width && pos.y < height && !reverse(current.direction, c.dir) {
                gird_cost := 0
                switch dir := c.dir; dir {
                    case LEFT:
                          

                }
				new_cost := current.cost + grid[c.pos]
				if new_cost <= cost_map[c.pos] {
					valid := false
					repeats := current.repeats
					if c.dir == current.direction && current.repeats < 2 {
						valid = true
						repeats += 1
					} else if c.dir != current.direction {
						valid = true
						repeats = 0
					} else {
						if debug {
							fmt.Printf("We had to break the direction %v to %v\n", current, c)
						}
					}
					if valid {
						wc := WalkCost{c.pos, new_cost, c.dir, repeats}
						open_set = append(open_set, wc)
						cost_map[c.pos] = new_cost
						came_from[c.pos] = current.pos

						if debug {
							fmt.Printf("New node to visit: %v\n", wc)
						}
					}
				} else {
                    if debug {
                        fmt.Printf("New cost %v is higher than current cost %v\n", new_cost, cost_map[c.pos])
                    }
                }
			} else {
                if debug {
                    fmt.Printf("Not valid because of grid or reversing direction.\n")
                }
            }
		}
	}
	return cost_map[target]
}

func processWorker(id int, work <-chan Position, resultChan chan<- int, wg *sync.WaitGroup,
	grid map[Position]int, width, height int, target Position) {
	defer wg.Done()
	for w := range work {
		//fmt.Printf("Worker=%v calculating %v %v\n", id, w.spring, w.config)
		//result := processMirrorImage(w, false)
		result := 0
		resultChan <- walkGrid(grid, width, height, w, target)
		fmt.Printf("Worker=%v: %v => %v\n", id, w, result)
	}
}

func main() {
	if debug {
		fmt.Println("Debug enabled")
	}
	cores_f := flag.Int("t", -1, "How many cores (threads) should we run?")
	filename_f := flag.String("f", "", "On which file should we run this?")
	flag.Parse()

	// The second element in os.Args is the first argument
	filename := *filename_f
	if len(filename) == 0 {
		fmt.Println("Please provide a filename")
		os.Exit(1)
	}
	cores := *cores_f
	if cores < 0 {
		cores = 1
	}

	dat, err := os.ReadFile(filename)
	check(err)

	// Read file
	grid := make(map[Position]int)
	height := 0
	width := 0
	for y, line := range strings.Split(string(dat), "\n") {
		cleaned_line := strings.TrimSpace(line)
		if len(cleaned_line) > 0 {
			for x, r := range cleaned_line {
				position := Position{x, y}
				grid[position] = toInt(string(r))
				if x > width {
					width = x
				}
			}
			if y > height {
				height = y
			}
			if debug {
				fmt.Printf("%v %v \n", cleaned_line, len(cleaned_line))
			}
		}
	}
	height++
	width++
	//**************************+
	channel_length := 1
	//channel_length := height*2 + width*2
	resultChan := make(chan int, channel_length)
	workChan := make(chan Position, channel_length)
	var wg sync.WaitGroup

	var numWorkers int = cores
	if debug {
		numWorkers = 1
	} else {
		if numWorkers < 1 {
			numWorkers = 1
		} else if numWorkers > 24 {
			numWorkers = 24
		}
		numWorkers = min(numWorkers, channel_length)
	}
	target := Position{x: width - 1, y: height - 1}
	for i := 0; i < numWorkers; i++ {
		wg.Add(1)
		go processWorker(i, workChan, resultChan, &wg, grid, width, height, target)
	}
	fmt.Printf("To work on: %v starts with %v threads\n", channel_length, numWorkers)

	b := Position{0, 0}
	workChan <- b
	close(workChan)

	// Close the channel once all goroutines have finished
	go func() {
		wg.Wait()
		close(resultChan)
	}()

	// Collect results
	results := 0
	for result := range resultChan {
		if result > results {
			results = result
		}
	}
	fmt.Println("Final results:", results)

	fmt.Println("")
}
